PROG=	test #variable PROG that is equal to test which is going to be the executable file name

OBJS=	one.o main.o two.o three.o #variable OBJS which contains the .o files that are created.

CFLAGS=	-Wall -g #variable Cflags = -Wall, show all possible warnings and debug them

all: ${PROG} #build all of PROG as test

${PROG}: ${OBJS} #Give definition to PROG
	@echo $@ depends on $? #stdout ${PROG} depends on the {changed files}
	${CC} ${LDFLAGS} ${OBJS} -o ${PROG} #${CC} = gcc, ${LDFLAGS} = invoke the linker ld, ${OBJS} = that variable, -o = option to name the executable, ${PROG} = test
	#It would read gcc -L one.o main.o two.o three.o -o test

.c.o: #Old fashioned suffix rule for defining rules.
	$(CC) -c $(CFLAGS) -o $@ $< #Stores important suffixes in the .SUFFIXES macro
	#So, stores gcc -c -wall -g -o test. This is for the rule for generating one.o/main.o... from one.c/main.c
	
clean: #Clean files that have test, one.o/main.o/anything in OBJS variable
	rm -f ${PROG} ${OBJS}
